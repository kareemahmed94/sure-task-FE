{"remainingRequest":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/babel-loader/lib/index.js!/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/vuetify/lib/mixins/themeable/index.js","dependencies":[{"path":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/vuetify/lib/mixins/themeable/index.js","mtime":499162500000},{"path":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/cache-loader/dist/cjs.js","mtime":1617458485530},{"path":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/babel-loader/lib/index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import _objectSpread from \"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/@babel/runtime/helpers/builtin/es6/objectSpread\";\nimport Vue from 'vue';\n/* @vue/component */\n\nvar Themeable = Vue.extend().extend({\n  name: 'themeable',\n  provide: function provide() {\n    return {\n      theme: this.themeableProvide\n    };\n  },\n  inject: {\n    theme: {\n      default: {\n        isDark: false\n      }\n    }\n  },\n  props: {\n    dark: {\n      type: Boolean,\n      default: null\n    },\n    light: {\n      type: Boolean,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      themeableProvide: {\n        isDark: false\n      }\n    };\n  },\n  computed: {\n    appIsDark: function appIsDark() {\n      return this.$vuetify.theme.dark || false;\n    },\n    isDark: function isDark() {\n      if (this.dark === true) {\n        // explicitly dark\n        return true;\n      } else if (this.light === true) {\n        // explicitly light\n        return false;\n      } else {\n        // inherit from parent, or default false if there is none\n        return this.theme.isDark;\n      }\n    },\n    themeClasses: function themeClasses() {\n      return {\n        'theme--dark': this.isDark,\n        'theme--light': !this.isDark\n      };\n    },\n\n    /** Used by menus and dialogs, inherits from v-app instead of the parent */\n    rootIsDark: function rootIsDark() {\n      if (this.dark === true) {\n        // explicitly dark\n        return true;\n      } else if (this.light === true) {\n        // explicitly light\n        return false;\n      } else {\n        // inherit from v-app\n        return this.appIsDark;\n      }\n    },\n    rootThemeClasses: function rootThemeClasses() {\n      return {\n        'theme--dark': this.rootIsDark,\n        'theme--light': !this.rootIsDark\n      };\n    }\n  },\n  watch: {\n    isDark: {\n      handler: function handler(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          this.themeableProvide.isDark = this.isDark;\n        }\n      },\n      immediate: true\n    }\n  }\n});\nexport default Themeable;\nexport function functionalThemeClasses(context) {\n  var vm = _objectSpread({}, context.props, context.injections);\n\n  var isDark = Themeable.options.computed.isDark.call(vm);\n  return Themeable.options.computed.themeClasses.call({\n    isDark: isDark\n  });\n} //# sourceMappingURL=index.js.map",{"version":3,"sources":["node_modules/vuetify/lib/mixins/themeable/index.js"],"names":["Vue","Themeable","extend","name","provide","theme","themeableProvide","inject","default","isDark","props","dark","type","Boolean","light","data","computed","appIsDark","$vuetify","themeClasses","rootIsDark","rootThemeClasses","watch","handler","newVal","oldVal","immediate","functionalThemeClasses","context","vm","injections","options","call"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA;;AAEA,IAAMC,YAAYD,IAAIE,MAAJ,GAAaA,MAAb,CAAoB;AACpCC,QAAM,WAD8B;AAGpCC,SAHoC,qBAG1B;AACR,WAAO;AACLC,aAAO,KAAKC;AADP,KAAP;AAGD,GAPmC;AASpCC,UAAQ;AACNF,WAAO;AACLG,eAAS;AACPC,gBAAQ;AADD;AADJ;AADD,GAT4B;AAgBpCC,SAAO;AACLC,UAAM;AACJC,YAAMC,OADF;AAEJL,eAAS;AAFL,KADD;AAKLM,WAAO;AACLF,YAAMC,OADD;AAELL,eAAS;AAFJ;AALF,GAhB6B;AA2BpCO,MA3BoC,kBA2B7B;AACL,WAAO;AACLT,wBAAkB;AAChBG,gBAAQ;AADQ;AADb,KAAP;AAKD,GAjCmC;AAmCpCO,YAAU;AACRC,aADQ,uBACI;AACV,aAAO,KAAKC,QAAL,CAAcb,KAAd,CAAoBM,IAApB,IAA4B,KAAnC;AACD,KAHO;AAKRF,UALQ,oBAKC;AACP,UAAI,KAAKE,IAAL,KAAc,IAAlB,EAAwB;AACtB;AACA,eAAO,IAAP;AACD,OAHD,MAGO,IAAI,KAAKG,KAAL,KAAe,IAAnB,EAAyB;AAC9B;AACA,eAAO,KAAP;AACD,OAHM,MAGA;AACL;AACA,eAAO,KAAKT,KAAL,CAAWI,MAAlB;AACD;AACF,KAhBO;AAkBRU,gBAlBQ,0BAkBO;AACb,aAAO;AACL,uBAAe,KAAKV,MADf;AAEL,wBAAgB,CAAC,KAAKA;AAFjB,OAAP;AAID,KAvBO;;AAyBR;AACAW,cA1BQ,wBA0BK;AACX,UAAI,KAAKT,IAAL,KAAc,IAAlB,EAAwB;AACtB;AACA,eAAO,IAAP;AACD,OAHD,MAGO,IAAI,KAAKG,KAAL,KAAe,IAAnB,EAAyB;AAC9B;AACA,eAAO,KAAP;AACD,OAHM,MAGA;AACL;AACA,eAAO,KAAKG,SAAZ;AACD;AACF,KArCO;AAuCRI,oBAvCQ,8BAuCW;AACjB,aAAO;AACL,uBAAe,KAAKD,UADf;AAEL,wBAAgB,CAAC,KAAKA;AAFjB,OAAP;AAID;AA5CO,GAnC0B;AAkFpCE,SAAO;AACLb,YAAQ;AACNc,aADM,mBACEC,MADF,EACUC,MADV,EACkB;AACtB,YAAID,WAAWC,MAAf,EAAuB;AACrB,eAAKnB,gBAAL,CAAsBG,MAAtB,GAA+B,KAAKA,MAApC;AACD;AACF,OALK;AAONiB,iBAAW;AAPL;AADH;AAlF6B,CAApB,CAAlB;AA8FA,eAAezB,SAAf;AACA,OAAO,SAAS0B,sBAAT,CAAgCC,OAAhC,EAAyC;AAC9C,MAAMC,uBAAUD,QAAQlB,KAAlB,EACDkB,QAAQE,UADP,CAAN;;AAGA,MAAMrB,SAASR,UAAU8B,OAAV,CAAkBf,QAAlB,CAA2BP,MAA3B,CAAkCuB,IAAlC,CAAuCH,EAAvC,CAAf;AACA,SAAO5B,UAAU8B,OAAV,CAAkBf,QAAlB,CAA2BG,YAA3B,CAAwCa,IAAxC,CAA6C;AAClDvB;AADkD,GAA7C,CAAP;AAGD,C,CACD","sourceRoot":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter","sourcesContent":["import Vue from 'vue';\n/* @vue/component */\n\nconst Themeable = Vue.extend().extend({\n  name: 'themeable',\n\n  provide() {\n    return {\n      theme: this.themeableProvide\n    };\n  },\n\n  inject: {\n    theme: {\n      default: {\n        isDark: false\n      }\n    }\n  },\n  props: {\n    dark: {\n      type: Boolean,\n      default: null\n    },\n    light: {\n      type: Boolean,\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      themeableProvide: {\n        isDark: false\n      }\n    };\n  },\n\n  computed: {\n    appIsDark() {\n      return this.$vuetify.theme.dark || false;\n    },\n\n    isDark() {\n      if (this.dark === true) {\n        // explicitly dark\n        return true;\n      } else if (this.light === true) {\n        // explicitly light\n        return false;\n      } else {\n        // inherit from parent, or default false if there is none\n        return this.theme.isDark;\n      }\n    },\n\n    themeClasses() {\n      return {\n        'theme--dark': this.isDark,\n        'theme--light': !this.isDark\n      };\n    },\n\n    /** Used by menus and dialogs, inherits from v-app instead of the parent */\n    rootIsDark() {\n      if (this.dark === true) {\n        // explicitly dark\n        return true;\n      } else if (this.light === true) {\n        // explicitly light\n        return false;\n      } else {\n        // inherit from v-app\n        return this.appIsDark;\n      }\n    },\n\n    rootThemeClasses() {\n      return {\n        'theme--dark': this.rootIsDark,\n        'theme--light': !this.rootIsDark\n      };\n    }\n\n  },\n  watch: {\n    isDark: {\n      handler(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          this.themeableProvide.isDark = this.isDark;\n        }\n      },\n\n      immediate: true\n    }\n  }\n});\nexport default Themeable;\nexport function functionalThemeClasses(context) {\n  const vm = { ...context.props,\n    ...context.injections\n  };\n  const isDark = Themeable.options.computed.isDark.call(vm);\n  return Themeable.options.computed.themeClasses.call({\n    isDark\n  });\n}\n//# sourceMappingURL=index.js.map"]}]}