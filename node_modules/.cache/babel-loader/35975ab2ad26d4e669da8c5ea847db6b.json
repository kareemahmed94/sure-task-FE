{"remainingRequest":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/babel-loader/lib/index.js!/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/vuetify/lib/services/theme/utils.js","dependencies":[{"path":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/vuetify/lib/services/theme/utils.js","mtime":499162500000},{"path":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/cache-loader/dist/cjs.js","mtime":1617458485530},{"path":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/babel-loader/lib/index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport _slicedToArray from \"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/@babel/runtime/helpers/builtin/es6/slicedToArray\";\nimport _typeof from \"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/@babel/runtime/helpers/builtin/es6/typeof\";\nimport \"core-js/modules/es6.string.starts-with\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.string.anchor\";\nimport _objectWithoutProperties from \"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/@babel/runtime/helpers/builtin/es6/objectWithoutProperties\";\nimport { keys } from '../../util/helpers';\nimport { colorToInt, intToHex, colorToHex } from '../../util/colorUtils';\nimport * as sRGB from '../../util/color/transformSRGB';\nimport * as LAB from '../../util/color/transformCIELAB';\nexport function parse(theme) {\n  var isItem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var variations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var anchor = theme.anchor,\n      variant = _objectWithoutProperties(theme, [\"anchor\"]);\n\n  var colors = Object.keys(variant);\n  var parsedTheme = {};\n\n  for (var i = 0; i < colors.length; ++i) {\n    var name = colors[i];\n    var value = theme[name];\n    if (value == null) continue;\n\n    if (!variations) {\n      parsedTheme[name] = {\n        base: intToHex(colorToInt(value))\n      };\n    } else if (isItem) {\n      /* istanbul ignore else */\n      if (name === 'base' || name.startsWith('lighten') || name.startsWith('darken')) {\n        parsedTheme[name] = colorToHex(value);\n      }\n    } else if (_typeof(value) === 'object') {\n      parsedTheme[name] = parse(value, true, variations);\n    } else {\n      parsedTheme[name] = genVariations(name, colorToInt(value));\n    }\n  }\n\n  if (!isItem) {\n    parsedTheme.anchor = anchor || parsedTheme.base || parsedTheme.primary.base;\n  }\n\n  return parsedTheme;\n}\n/**\n * Generate the CSS for a base color (.primary)\n */\n\nvar genBaseColor = function genBaseColor(name, value) {\n  return \"\\n.v-application .\".concat(name, \" {\\n  background-color: \").concat(value, \" !important;\\n  border-color: \").concat(value, \" !important;\\n}\\n.v-application .\").concat(name, \"--text {\\n  color: \").concat(value, \" !important;\\n  caret-color: \").concat(value, \" !important;\\n}\");\n};\n/**\n * Generate the CSS for a variant color (.primary.darken-2)\n */\n\n\nvar genVariantColor = function genVariantColor(name, variant, value) {\n  var _variant$split = variant.split(/(\\d)/, 2),\n      _variant$split2 = _slicedToArray(_variant$split, 2),\n      type = _variant$split2[0],\n      n = _variant$split2[1];\n\n  return \"\\n.v-application .\".concat(name, \".\").concat(type, \"-\").concat(n, \" {\\n  background-color: \").concat(value, \" !important;\\n  border-color: \").concat(value, \" !important;\\n}\\n.v-application .\").concat(name, \"--text.text--\").concat(type, \"-\").concat(n, \" {\\n  color: \").concat(value, \" !important;\\n  caret-color: \").concat(value, \" !important;\\n}\");\n};\n\nvar genColorVariableName = function genColorVariableName(name) {\n  var variant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'base';\n  return \"--v-\".concat(name, \"-\").concat(variant);\n};\n\nvar genColorVariable = function genColorVariable(name) {\n  var variant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'base';\n  return \"var(\".concat(genColorVariableName(name, variant), \")\");\n};\n\nexport function genStyles(theme) {\n  var cssVar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var anchor = theme.anchor,\n      variant = _objectWithoutProperties(theme, [\"anchor\"]);\n\n  var colors = Object.keys(variant);\n  if (!colors.length) return '';\n  var variablesCss = '';\n  var css = '';\n  var aColor = cssVar ? genColorVariable('anchor') : anchor;\n  css += \".v-application a { color: \".concat(aColor, \"; }\");\n  cssVar && (variablesCss += \"  \".concat(genColorVariableName('anchor'), \": \").concat(anchor, \";\\n\"));\n\n  for (var i = 0; i < colors.length; ++i) {\n    var name = colors[i];\n    var value = theme[name];\n    css += genBaseColor(name, cssVar ? genColorVariable(name) : value.base);\n    cssVar && (variablesCss += \"  \".concat(genColorVariableName(name), \": \").concat(value.base, \";\\n\"));\n    var variants = keys(value);\n\n    for (var _i = 0; _i < variants.length; ++_i) {\n      var _variant = variants[_i];\n      var variantValue = value[_variant];\n      if (_variant === 'base') continue;\n      css += genVariantColor(name, _variant, cssVar ? genColorVariable(name, _variant) : variantValue);\n      cssVar && (variablesCss += \"  \".concat(genColorVariableName(name, _variant), \": \").concat(variantValue, \";\\n\"));\n    }\n  }\n\n  if (cssVar) {\n    variablesCss = \":root {\\n\".concat(variablesCss, \"}\\n\\n\");\n  }\n\n  return variablesCss + css;\n}\nexport function genVariations(name, value) {\n  var values = {\n    base: intToHex(value)\n  };\n\n  for (var i = 5; i > 0; --i) {\n    values[\"lighten\".concat(i)] = intToHex(lighten(value, i));\n  }\n\n  for (var _i2 = 1; _i2 <= 4; ++_i2) {\n    values[\"darken\".concat(_i2)] = intToHex(darken(value, _i2));\n  }\n\n  return values;\n}\nexport function lighten(value, amount) {\n  var lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] + amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n}\nexport function darken(value, amount) {\n  var lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] - amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n} //# sourceMappingURL=utils.js.map",{"version":3,"sources":["node_modules/vuetify/lib/services/theme/utils.js"],"names":["keys","colorToInt","intToHex","colorToHex","sRGB","LAB","parse","theme","isItem","variations","anchor","variant","colors","Object","parsedTheme","i","length","name","value","base","startsWith","genVariations","primary","genBaseColor","genVariantColor","split","type","n","genColorVariableName","genColorVariable","genStyles","cssVar","variablesCss","css","aColor","variants","variantValue","values","lighten","darken","amount","lab","fromXYZ","toXYZ"],"mappings":"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","sourceRoot":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter","sourcesContent":["import { keys } from '../../util/helpers';\nimport { colorToInt, intToHex, colorToHex } from '../../util/colorUtils';\nimport * as sRGB from '../../util/color/transformSRGB';\nimport * as LAB from '../../util/color/transformCIELAB';\nexport function parse(theme, isItem = false, variations = true) {\n  const {\n    anchor,\n    ...variant\n  } = theme;\n  const colors = Object.keys(variant);\n  const parsedTheme = {};\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i];\n    const value = theme[name];\n    if (value == null) continue;\n\n    if (!variations) {\n      parsedTheme[name] = {\n        base: intToHex(colorToInt(value))\n      };\n    } else if (isItem) {\n      /* istanbul ignore else */\n      if (name === 'base' || name.startsWith('lighten') || name.startsWith('darken')) {\n        parsedTheme[name] = colorToHex(value);\n      }\n    } else if (typeof value === 'object') {\n      parsedTheme[name] = parse(value, true, variations);\n    } else {\n      parsedTheme[name] = genVariations(name, colorToInt(value));\n    }\n  }\n\n  if (!isItem) {\n    parsedTheme.anchor = anchor || parsedTheme.base || parsedTheme.primary.base;\n  }\n\n  return parsedTheme;\n}\n/**\n * Generate the CSS for a base color (.primary)\n */\n\nconst genBaseColor = (name, value) => {\n  return `\n.v-application .${name} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`;\n};\n/**\n * Generate the CSS for a variant color (.primary.darken-2)\n */\n\n\nconst genVariantColor = (name, variant, value) => {\n  const [type, n] = variant.split(/(\\d)/, 2);\n  return `\n.v-application .${name}.${type}-${n} {\n  background-color: ${value} !important;\n  border-color: ${value} !important;\n}\n.v-application .${name}--text.text--${type}-${n} {\n  color: ${value} !important;\n  caret-color: ${value} !important;\n}`;\n};\n\nconst genColorVariableName = (name, variant = 'base') => `--v-${name}-${variant}`;\n\nconst genColorVariable = (name, variant = 'base') => `var(${genColorVariableName(name, variant)})`;\n\nexport function genStyles(theme, cssVar = false) {\n  const {\n    anchor,\n    ...variant\n  } = theme;\n  const colors = Object.keys(variant);\n  if (!colors.length) return '';\n  let variablesCss = '';\n  let css = '';\n  const aColor = cssVar ? genColorVariable('anchor') : anchor;\n  css += `.v-application a { color: ${aColor}; }`;\n  cssVar && (variablesCss += `  ${genColorVariableName('anchor')}: ${anchor};\\n`);\n\n  for (let i = 0; i < colors.length; ++i) {\n    const name = colors[i];\n    const value = theme[name];\n    css += genBaseColor(name, cssVar ? genColorVariable(name) : value.base);\n    cssVar && (variablesCss += `  ${genColorVariableName(name)}: ${value.base};\\n`);\n    const variants = keys(value);\n\n    for (let i = 0; i < variants.length; ++i) {\n      const variant = variants[i];\n      const variantValue = value[variant];\n      if (variant === 'base') continue;\n      css += genVariantColor(name, variant, cssVar ? genColorVariable(name, variant) : variantValue);\n      cssVar && (variablesCss += `  ${genColorVariableName(name, variant)}: ${variantValue};\\n`);\n    }\n  }\n\n  if (cssVar) {\n    variablesCss = `:root {\\n${variablesCss}}\\n\\n`;\n  }\n\n  return variablesCss + css;\n}\nexport function genVariations(name, value) {\n  const values = {\n    base: intToHex(value)\n  };\n\n  for (let i = 5; i > 0; --i) {\n    values[`lighten${i}`] = intToHex(lighten(value, i));\n  }\n\n  for (let i = 1; i <= 4; ++i) {\n    values[`darken${i}`] = intToHex(darken(value, i));\n  }\n\n  return values;\n}\nexport function lighten(value, amount) {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] + amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n}\nexport function darken(value, amount) {\n  const lab = LAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] - amount * 10;\n  return sRGB.fromXYZ(LAB.toXYZ(lab));\n}\n//# sourceMappingURL=utils.js.map"]}]}