{"remainingRequest":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/babel-loader/lib/index.js!/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/vuetify/lib/mixins/scrollable/index.js","dependencies":[{"path":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/vuetify/lib/mixins/scrollable/index.js","mtime":499162500000},{"path":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/cache-loader/dist/cjs.js","mtime":1617458485530},{"path":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter/node_modules/babel-loader/lib/index.js","mtime":1529635966000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n// Directives\nimport { Scroll } from '../../directives'; // Utilities\n\nimport { consoleWarn } from '../../util/console'; // Types\n\nimport Vue from 'vue';\n/**\n * Scrollable\n *\n * Used for monitoring scrolling and\n * invoking functions based upon\n * scrolling thresholds being\n * met.\n */\n\n/* @vue/component */\n\nexport default Vue.extend({\n  name: 'scrollable',\n  directives: {\n    Scroll: Scroll\n  },\n  props: {\n    scrollTarget: String,\n    scrollThreshold: [String, Number]\n  },\n  data: function data() {\n    return {\n      currentScroll: 0,\n      currentThreshold: 0,\n      isActive: false,\n      isScrollingUp: false,\n      previousScroll: 0,\n      savedScroll: 0,\n      target: null\n    };\n  },\n  computed: {\n    /**\n     * A computed property that returns\n     * whether scrolling features are\n     * enabled or disabled\n     */\n    canScroll: function canScroll() {\n      return typeof window !== 'undefined';\n    },\n\n    /**\n     * The threshold that must be met before\n     * thresholdMet function is invoked\n     */\n    computedScrollThreshold: function computedScrollThreshold() {\n      return this.scrollThreshold ? Number(this.scrollThreshold) : 300;\n    }\n  },\n  watch: {\n    isScrollingUp: function isScrollingUp() {\n      this.savedScroll = this.savedScroll || this.currentScroll;\n    },\n    isActive: function isActive() {\n      this.savedScroll = 0;\n    }\n  },\n  mounted: function mounted() {\n    if (this.scrollTarget) {\n      this.target = document.querySelector(this.scrollTarget);\n\n      if (!this.target) {\n        consoleWarn(\"Unable to locate element with identifier \".concat(this.scrollTarget), this);\n      }\n    }\n  },\n  methods: {\n    onScroll: function onScroll() {\n      var _this = this;\n\n      if (!this.canScroll) return;\n      this.previousScroll = this.currentScroll;\n      this.currentScroll = this.target ? this.target.scrollTop : window.pageYOffset;\n      this.isScrollingUp = this.currentScroll < this.previousScroll;\n      this.currentThreshold = Math.abs(this.currentScroll - this.computedScrollThreshold);\n      this.$nextTick(function () {\n        if (Math.abs(_this.currentScroll - _this.savedScroll) > _this.computedScrollThreshold) _this.thresholdMet();\n      });\n    },\n\n    /**\n     * The method invoked when\n     * scrolling in any direction\n     * has exceeded the threshold\n     */\n    thresholdMet: function thresholdMet() {}\n  }\n}); //# sourceMappingURL=index.js.map",{"version":3,"sources":["node_modules/vuetify/lib/mixins/scrollable/index.js"],"names":["Scroll","consoleWarn","Vue","extend","name","directives","props","scrollTarget","String","scrollThreshold","Number","data","currentScroll","currentThreshold","isActive","isScrollingUp","previousScroll","savedScroll","target","computed","canScroll","window","computedScrollThreshold","watch","mounted","document","querySelector","methods","onScroll","scrollTop","pageYOffset","Math","abs","$nextTick","thresholdMet"],"mappings":";AAAA;AACA,SAASA,MAAT,QAAuB,kBAAvB,C,CAA2C;;AAE3C,SAASC,WAAT,QAA4B,oBAA5B,C,CAAkD;;AAElD,OAAOC,GAAP,MAAgB,KAAhB;AACA;;;;;;;;;AASA;;AAEA,eAAeA,IAAIC,MAAJ,CAAW;AACxBC,QAAM,YADkB;AAExBC,cAAY;AACVL;AADU,GAFY;AAKxBM,SAAO;AACLC,kBAAcC,MADT;AAELC,qBAAiB,CAACD,MAAD,EAASE,MAAT;AAFZ,GALiB;AASxBC,QAAM;AAAA,WAAO;AACXC,qBAAe,CADJ;AAEXC,wBAAkB,CAFP;AAGXC,gBAAU,KAHC;AAIXC,qBAAe,KAJJ;AAKXC,sBAAgB,CALL;AAMXC,mBAAa,CANF;AAOXC,cAAQ;AAPG,KAAP;AAAA,GATkB;AAkBxBC,YAAU;AACR;;;;;AAKAC,aANQ,uBAMI;AACV,aAAO,OAAOC,MAAP,KAAkB,WAAzB;AACD,KARO;;AAUR;;;;AAIAC,2BAdQ,qCAckB;AACxB,aAAO,KAAKb,eAAL,GAAuBC,OAAO,KAAKD,eAAZ,CAAvB,GAAsD,GAA7D;AACD;AAhBO,GAlBc;AAqCxBc,SAAO;AACLR,iBADK,2BACW;AACd,WAAKE,WAAL,GAAmB,KAAKA,WAAL,IAAoB,KAAKL,aAA5C;AACD,KAHI;AAKLE,YALK,sBAKM;AACT,WAAKG,WAAL,GAAmB,CAAnB;AACD;AAPI,GArCiB;AAgDxBO,SAhDwB,qBAgDd;AACR,QAAI,KAAKjB,YAAT,EAAuB;AACrB,WAAKW,MAAL,GAAcO,SAASC,aAAT,CAAuB,KAAKnB,YAA5B,CAAd;;AAEA,UAAI,CAAC,KAAKW,MAAV,EAAkB;AAChBjB,uEAAwD,KAAKM,YAA7D,GAA6E,IAA7E;AACD;AACF;AACF,GAxDuB;AA0DxBoB,WAAS;AACPC,YADO,sBACI;AAAA;;AACT,UAAI,CAAC,KAAKR,SAAV,EAAqB;AACrB,WAAKJ,cAAL,GAAsB,KAAKJ,aAA3B;AACA,WAAKA,aAAL,GAAqB,KAAKM,MAAL,GAAc,KAAKA,MAAL,CAAYW,SAA1B,GAAsCR,OAAOS,WAAlE;AACA,WAAKf,aAAL,GAAqB,KAAKH,aAAL,GAAqB,KAAKI,cAA/C;AACA,WAAKH,gBAAL,GAAwBkB,KAAKC,GAAL,CAAS,KAAKpB,aAAL,GAAqB,KAAKU,uBAAnC,CAAxB;AACA,WAAKW,SAAL,CAAe,YAAM;AACnB,YAAIF,KAAKC,GAAL,CAAS,MAAKpB,aAAL,GAAqB,MAAKK,WAAnC,IAAkD,MAAKK,uBAA3D,EAAoF,MAAKY,YAAL;AACrF,OAFD;AAGD,KAVM;;AAYP;;;;;AAKAA,gBAjBO,0BAiBQ,CAAE;AAjBV;AA1De,CAAX,CAAf,C,CA+EA","sourceRoot":"/Users/kareem/Desktop/dev/kareem/shore/vue-starter","sourcesContent":["// Directives\nimport { Scroll } from '../../directives'; // Utilities\n\nimport { consoleWarn } from '../../util/console'; // Types\n\nimport Vue from 'vue';\n/**\n * Scrollable\n *\n * Used for monitoring scrolling and\n * invoking functions based upon\n * scrolling thresholds being\n * met.\n */\n\n/* @vue/component */\n\nexport default Vue.extend({\n  name: 'scrollable',\n  directives: {\n    Scroll\n  },\n  props: {\n    scrollTarget: String,\n    scrollThreshold: [String, Number]\n  },\n  data: () => ({\n    currentScroll: 0,\n    currentThreshold: 0,\n    isActive: false,\n    isScrollingUp: false,\n    previousScroll: 0,\n    savedScroll: 0,\n    target: null\n  }),\n  computed: {\n    /**\n     * A computed property that returns\n     * whether scrolling features are\n     * enabled or disabled\n     */\n    canScroll() {\n      return typeof window !== 'undefined';\n    },\n\n    /**\n     * The threshold that must be met before\n     * thresholdMet function is invoked\n     */\n    computedScrollThreshold() {\n      return this.scrollThreshold ? Number(this.scrollThreshold) : 300;\n    }\n\n  },\n  watch: {\n    isScrollingUp() {\n      this.savedScroll = this.savedScroll || this.currentScroll;\n    },\n\n    isActive() {\n      this.savedScroll = 0;\n    }\n\n  },\n\n  mounted() {\n    if (this.scrollTarget) {\n      this.target = document.querySelector(this.scrollTarget);\n\n      if (!this.target) {\n        consoleWarn(`Unable to locate element with identifier ${this.scrollTarget}`, this);\n      }\n    }\n  },\n\n  methods: {\n    onScroll() {\n      if (!this.canScroll) return;\n      this.previousScroll = this.currentScroll;\n      this.currentScroll = this.target ? this.target.scrollTop : window.pageYOffset;\n      this.isScrollingUp = this.currentScroll < this.previousScroll;\n      this.currentThreshold = Math.abs(this.currentScroll - this.computedScrollThreshold);\n      this.$nextTick(() => {\n        if (Math.abs(this.currentScroll - this.savedScroll) > this.computedScrollThreshold) this.thresholdMet();\n      });\n    },\n\n    /**\n     * The method invoked when\n     * scrolling in any direction\n     * has exceeded the threshold\n     */\n    thresholdMet() {}\n\n  }\n});\n//# sourceMappingURL=index.js.map"]}]}